(defn db
  {::di/kind :component}
  []
  (atom {}))

(def branching-factor 16) ;; for tests

(defn settings
  {::di/kind :component}
  [{branching-factor `branching-factor}]
  (Settings. branching-factor))

(defn sorted-set
  [{^Settings settings `settings
    storage            `storage}
   ^Comparator cmp]
  (PersistentSortedSet. {#_meta} cmp storage settings))

(defn storage
  {::di/kind :component}
  [{db                 `db
    ^Settings settings `settings}]
  (reify IStorage
    (store [_ node]
      (let [address (str (random-uuid))]
        (swap! db assoc address
               (json/write-value-as-string
                {:type      (if (instance? Branch node) ;; for js
                              :branch
                              :leaf)
                 :level     (.level node)
                 :keys      (.keys node)
                 :addresses (when (instance? Branch node)
                              (.addresses ^Branch node))}))
        address))
    (restore [_ address]
      (let [blob (get @db address)

            {:strs [level
                    ^java.util.List keys
                    ^java.util.List addresses]}
            (json/read-value blob)]

        (if addresses
          (Branch. (int level) ^java.util.List keys ^java.util.List addresses settings)
          (Leaf. keys settings))))))


(comment
  (di/with-open [[sorted-set db] (di/start [`sorted-set `db])]
    (let [s  (sorted-set compare)
          s' (into s (range 100))]
      (set/store s')
      @db))

  ,,,)



(comment
  (di/with-open [[sorted-set db] (di/start [`sorted-set `db])]
    (let [s  (sorted-set compare)
          s' (into s (range 100))]
      (set/store s')
      @db))

  ,,,)

(def e 0)
(def a 1)
(def v 2)

(defn eav [x y]
  (cond
    (> (x e) (y e)) 1
    (< (x e) (y e)) -1
    (> (x a) (y a)) 1
    (< (x a) (y a)) -1
    (> (x v) (y v)) 1
    (< (x v) (y v)) -1
    :else 0))

(defn aev [x y]
  (cond
    (> (x a) (y a)) 1
    (< (x a) (y a)) -1
    (> (x e) (y e)) 1
    (< (x e) (y e)) -1
    (> (x v) (y v)) 1
    (< (x v) (y v)) -1
    :else 0))

(defn ave [x y]
  (cond
    (> (x a) (y a)) 1
    (< (x a) (y a)) -1
    (> (x v) (y v)) 1
    (< (x v) (y v)) -1
    (> (x e) (y e)) 1
    (< (x e) (y e)) -1
    :else 0))

(defn read-index [idx]
  (into {}
        (for [[k v] idx]
          [k (json/read-value v)])))

(comment
  (di/with-open [[sorted-set db] (di/start [`sorted-set `db]
                                           {`branching-factor 4})]
    (let [f      (Faker.)
          datoms (mapcat
                  (fn [i]
                    [[i "task/title"    (.. f chuckNorris fact)
                      i "task/assignee" (.. f name fullName)]])
                  (range 20))
          eavi   (sorted-set eav)
          eavi   (into eavi datoms)]
      (set/store eavi)
      (read-index @db)))


  ;; todo: transact! fn)
  ,,,)